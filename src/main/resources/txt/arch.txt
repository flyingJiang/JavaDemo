-
-DispatcherServlet-HandlerMapping-HandlerAdapter-Handler-ViewResolver

PriorityQueue<Map.Entry<Integer, Integer>> queue
                = new PriorityQueue<>((o1, o2) -> o1.getValue() - o2.getValue());
protected boolean removeEldestEntry(Map.Entry eldest) {
                return cache.size() > capacity;
            }
System.arraycopy(arr, 0, sortedArr, 0, arr.length);

// 先进先出 队列
        Queue<String> queue = new LinkedList<>();
        // 用这三个
        queue.peek();
        queue.poll();
        queue.offer("3");
// 栈
        Deque<Integer> stack = new ArrayDeque<>();
 // PriorityQueue是小顶堆，PriorityQueue出入的顺序跟优先级有关，默认是从小到大的优先级顺序。
        PriorityQueue<Integer> priorityQueue = new PriorityQueue<>();
        priorityQueue.isEmpty();
        priorityQueue.offer(8);
        priorityQueue.offer(4);
        priorityQueue.offer(2);
        System.out.println("priorityQueue.size(), " + priorityQueue.size());
        while (!priorityQueue.isEmpty()) {
            int a = priorityQueue.poll();
// 递归完成单链表翻转
    private ListNode reverseList(ListNode head) {
        if (head == null || head.next == null)
            return head;
        ListNode p = reverseList(head.next);
        head.next.next = head;
        head.next = null;
        return p;
    }